// Code generated by go-bindata.
// sources:
// localization/de-de.all.json
// localization/de-de.untranslated.json
// localization/en-us.all.json
// localization/en-us.untranslated.json
// DO NOT EDIT!

package latex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localizationDeDeAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd2\xc1\x8a\x14\x31\x10\x06\xe0\xf3\xce\x53\x14\x73\x5e\xdc\xbb\xb7\xf5\xa2\x20\xec\x49\x5d\x50\x24\x64\x92\xbf\xbb\x8b\xcd\x54\x9a\xaa\xca\x8e\xac\xf8\x36\xbe\x89\x2f\x26\xdd\xe3\x82\x4a\x67\xf6\x9c\xfc\x5f\x48\xd5\xff\x65\x47\xf4\x7d\x47\x44\xb4\xe7\xbc\x7f\x4d\xfb\x14\x0b\x24\x47\x0d\x27\xe0\x61\x7f\x7d\x3e\x72\x8d\x62\x25\x3a\x57\x59\xee\xbc\x5f\xef\x40\x4f\x35\x4d\xd8\xef\x88\x7e\x5c\x5f\x64\x82\x4d\x55\xbd\x87\xdd\x6f\x0b\x19\x73\x54\x3f\x42\x7a\xc1\xdb\x83\x83\x4b\x93\x71\x3b\xcf\x62\xae\x2d\x79\xd5\x5e\xbe\xd9\x81\x4b\x86\xde\xb0\x6c\x13\x05\x63\x2c\x41\x31\x2b\x0c\xe2\xd1\xf9\x11\x1d\xec\x2d\x0c\xfe\x54\x38\x4d\x50\xfa\x04\x75\x85\x43\xb7\x59\x89\xc7\x1e\x73\xb7\x1c\x6d\x87\x6a\xb0\x34\xd5\x5a\xc2\x0c\xe5\x9a\x2d\xf8\xc4\x76\x69\x4b\xef\xa2\x13\x0b\x65\x86\x41\xe9\x7e\xd9\x15\x09\xa7\xc9\xc9\x3c\xba\x8f\x18\x9a\x64\xc8\xab\xed\xf7\xea\x0c\x5d\xa9\x58\x42\x4c\xce\x8f\xec\x0c\xeb\x3c\xf5\x06\xae\x8c\xc3\xfa\x7d\xfa\xf0\xeb\xa7\xf3\xf8\x00\x76\x74\xe6\xfa\xb7\xfd\xbc\xa6\x45\x7a\x19\x57\xfa\x28\x0e\xd5\xe5\x1b\xdb\xf6\xac\x75\x80\xd9\x19\x3f\x4f\xac\xeb\x6a\x1b\xcc\xd2\xd4\x4a\x67\xe6\xb3\xd6\x3a\x84\x3a\x04\xe4\x96\xd6\x5c\x98\x15\x03\x7f\xbb\xdc\xa8\x26\xa3\x49\x4c\xd3\x09\x6c\x74\xa7\x9d\x01\xbb\x46\x16\xf4\x8a\x70\xdb\xec\xa9\xad\xf5\x94\x8c\x9b\x7f\x8b\x74\xf5\x2c\xf0\x11\x7f\xda\xb0\x2a\x57\xff\x23\x9f\xc1\xae\xb1\x1d\xd7\xf4\xee\xeb\xef\x00\x00\x00\xff\xff\x0f\xcc\xe3\x1f\xec\x03\x00\x00")

func localizationDeDeAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_localizationDeDeAllJson,
		"localization/de-de.all.json",
	)
}

func localizationDeDeAllJson() (*asset, error) {
	bytes, err := localizationDeDeAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "localization/de-de.all.json", size: 1004, mode: os.FileMode(436), modTime: time.Unix(1488206560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localizationDeDeUntranslatedJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func localizationDeDeUntranslatedJsonBytes() ([]byte, error) {
	return bindataRead(
		_localizationDeDeUntranslatedJson,
		"localization/de-de.untranslated.json",
	)
}

func localizationDeDeUntranslatedJson() (*asset, error) {
	bytes, err := localizationDeDeUntranslatedJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "localization/de-de.untranslated.json", size: 2, mode: os.FileMode(436), modTime: time.Unix(1479981513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localizationEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xc1\x4a\xc4\x30\x10\x86\xcf\xdb\xa7\x18\x7a\x5e\x7c\x00\xaf\xea\x41\x90\xd5\x83\xe0\x41\x24\x84\x76\xea\x0e\xa6\x99\x30\x99\x5d\x05\xf1\xdd\xa5\x69\x96\x16\x4d\x76\xcf\xf3\x7d\x5f\x69\xfe\xd7\x06\xe0\xbb\x01\x00\x68\xa9\x6f\xaf\xa1\xed\xac\x43\xdf\x5b\x31\x9f\x88\x1f\xed\x76\x3e\xa9\x58\x1f\x9d\x55\x62\x3f\x31\x37\x99\x81\xc4\x34\x00\x3f\xdb\xb3\x19\x13\xf7\x2c\x5a\x8b\xbd\x94\x0b\x3d\x06\x2b\x3a\xa2\xaf\x89\xb7\x0b\x50\x0c\x90\x8f\x2a\x87\x4e\x59\x2a\x81\xfb\x05\x28\x06\x1c\xbe\x5b\x67\x04\x83\x60\x44\xaf\x56\xe9\x88\x95\xd4\xc3\x84\xc2\x1f\xb4\x18\xf5\x76\xac\x45\x76\xd3\xa9\x2c\xb1\x89\xdd\x9e\xd9\x99\x80\x42\xdc\x47\xa3\x7b\x8a\xe7\x26\xda\x31\xcc\x06\x64\x03\x26\x23\x0d\x76\x55\xfe\x06\x07\x94\xa4\x5b\x67\x6c\xa7\x74\x24\x25\x8c\x95\xfc\xe3\x02\xc3\x0a\xbe\x18\x3e\x6d\x32\x65\x2e\x97\xd7\x74\x31\x1d\x84\x07\x8c\x71\x6e\xcf\xff\x5b\xc9\x3e\xad\xc8\xfc\x32\xd5\x24\x0f\x86\x07\x83\xfd\xa1\x4b\xba\x09\x82\x03\x7d\xd5\xc3\x3c\x00\x0f\x70\x77\xe2\x61\xc7\x95\x27\x56\xb1\xe4\xb1\x36\xff\x73\xbe\xae\xd5\xcd\xc9\xa4\x11\xf3\xf6\xc9\xde\xfc\x93\x69\xc4\x3c\x75\x0a\x34\x6f\xbf\x01\x00\x00\xff\xff\x30\x60\x8b\xd1\xda\x03\x00\x00")

func localizationEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_localizationEnUsAllJson,
		"localization/en-us.all.json",
	)
}

func localizationEnUsAllJson() (*asset, error) {
	bytes, err := localizationEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "localization/en-us.all.json", size: 986, mode: os.FileMode(436), modTime: time.Unix(1487590250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localizationEnUsUntranslatedJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\x8e\x05\x04\x00\x00\xff\xff\x29\xbb\x4c\x0d\x02\x00\x00\x00")

func localizationEnUsUntranslatedJsonBytes() ([]byte, error) {
	return bindataRead(
		_localizationEnUsUntranslatedJson,
		"localization/en-us.untranslated.json",
	)
}

func localizationEnUsUntranslatedJson() (*asset, error) {
	bytes, err := localizationEnUsUntranslatedJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "localization/en-us.untranslated.json", size: 2, mode: os.FileMode(436), modTime: time.Unix(1479981513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"localization/de-de.all.json": localizationDeDeAllJson,
	"localization/de-de.untranslated.json": localizationDeDeUntranslatedJson,
	"localization/en-us.all.json": localizationEnUsAllJson,
	"localization/en-us.untranslated.json": localizationEnUsUntranslatedJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"localization": &bintree{nil, map[string]*bintree{
		"de-de.all.json": &bintree{localizationDeDeAllJson, map[string]*bintree{}},
		"de-de.untranslated.json": &bintree{localizationDeDeUntranslatedJson, map[string]*bintree{}},
		"en-us.all.json": &bintree{localizationEnUsAllJson, map[string]*bintree{}},
		"en-us.untranslated.json": &bintree{localizationEnUsUntranslatedJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

